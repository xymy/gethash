[build-system]
requires = ["hatchling>=1.18"]
build-backend = "hatchling.build"

[project]
name = "gethash"
description = "Command-line hash utility"
readme = "README.md"
license = "MIT"
authors = [{ name = "xymy", email = "thyfan@163.com" }]
keywords = ["cryptography", "hash", "utility"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Security :: Cryptography",
    "Topic :: Utilities",
]
requires-python = ">=3.9"
dependencies = [
    "click>=8.1",
    "click-didyoumean>=0.3",
    "click-option-group>=0.5",
    "importlib-metadata>=4.10",
    "natsort>=8.4",
    "tqdm>=4.66",
    "typing-extensions>=4.4",
]
dynamic = ["version"]

[project.optional-dependencies]
all = [
    # https://www.pycryptodome.org/
    "pycryptodome>=3.16",
]
docs = [
    # https://rich.readthedocs.io/en/latest/
    "rich",
    # https://www.sphinx-doc.org/en/master/
    "sphinx>=7.2",
    # https://pradyunsg.me/furo/
    "furo>=2023.9",
    # https://myst-parser.readthedocs.io/en/latest/
    "myst-parser>=2.0",
    # https://sphinx-copybutton.readthedocs.io/en/latest/
    "sphinx-copybutton>=0.5",
]
lint = [
    # https://docs.astral.sh/ruff/
    "ruff>=0.1.6",
    # https://mypy.readthedocs.io/en/stable/
    "mypy>=1.7",
]
test = [
    # https://more-itertools.readthedocs.io/en/stable/
    "more-itertools>=10.0",
    # https://coverage.readthedocs.io/en/latest/
    "coverage>=7.3",
    # https://hypothesis.readthedocs.io/en/latest/
    "hypothesis>=6.86",
    # https://docs.pytest.org/en/latest/
    "pytest>=7.4",
    # https://pytest-cov.readthedocs.io/en/latest/
    "pytest-cov>=4.1",
]

[project.scripts]
gethash = "gethash.__main__:main"
blake2b = "gethash.cli.blake2b:main"
blake2s = "gethash.cli.blake2s:main"
crc32 = "gethash.cli.crc32:main"
md5 = "gethash.cli.md5:main"
sha1 = "gethash.cli.sha1:main"
sha256 = "gethash.cli.sha256:main"
sha3-256 = "gethash.cli.sha3_256:main"
sha3-512 = "gethash.cli.sha3_512:main"
sha512 = "gethash.cli.sha512:main"

[project.entry-points."gethash.backends"]
hashlib = "gethash.backends.hashlib:load"
pycryptodome = "gethash.backends.pycryptodome:load"
wrappers = "gethash.backends.wrappers:load"

[project.entry-points."gethash.commands"]
blake2b = "gethash.cli.blake2b:main"
blake2s = "gethash.cli.blake2s:main"
crc32 = "gethash.cli.crc32:main"
md5 = "gethash.cli.md5:main"
sha1 = "gethash.cli.sha1:main"
sha256 = "gethash.cli.sha256:main"
sha3-256 = "gethash.cli.sha3_256:main"
sha3-512 = "gethash.cli.sha3_512:main"
sha512 = "gethash.cli.sha512:main"

[project.urls]
Changelog = "https://github.com/xymy/gethash/blob/main/CHANGELOG.md"
Documentation = "https://github.com/xymy/gethash/tree/main/docs"
Source = "https://github.com/xymy/gethash"
Tracker = "https://github.com/xymy/gethash/issues"

[tool.hatch.version]
path = "src/gethash/__init__.py"

[tool.hatch.envs.default]
path = ".venv"
features = ["all", "docs", "lint", "test"]
system-packages = true

[tool.hatch.envs.default.env-vars]
COVERAGE_FILE = "{root}{/}.coverage"
HYPOTHESIS_STORAGE_DIRECTORY = "{root}{/}.cache{/}hypothesis"

[tool.hatch.envs.default.scripts]
docs = "python {root}{/}docs{/}release.py {args}"
lint = [
    "ruff check {root}{/}src {root}{/}tests",
    "ruff format {root}{/}src {root}{/}tests",
    "mypy {root}{/}src {root}{/}tests",
]
test = [
    "python -m coverage erase",
    "python -m pytest --cov-report=html:{root}{/}htmlcov {args}",
    "python -m coverage report",
]

[tool.ruff]
line-length = 120
target-version = "py39"
cache-dir = ".cache/ruff"
src = ["src"]
show-fixes = true
show-source = true
select = [
    "F",      # pyflakes
    "E",      # pycodestyle error
    "W",      # pycodestyle warning
    "D3",     # pydocstyle
    "PLE",    # pylint error
    "PLW",    # pylint warning
    "YTT",    # flake8-2020
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "B",      # flake8-bugbear
    "COM818", # flake8-commas
    "C4",     # flake8-comprehensions
    "ISC003", # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "RSE",    # flake8-raise
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "FLY",    # flynt
    "I",      # isort
    "PGH",    # pygrep-hooks
    "UP",     # pyupgrade
    "RUF",
]
ignore = [
    # Module level import not at top of file
    "E402",
    # Line too long ({width} > {limit} characters)
    "E501",
    # Use a single if statement instead of nested if statements
    "SIM102",
    # Use ternary operator {contents} instead of if-else-block
    "SIM108",
]

[tool.ruff.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.flake8-type-checking]
exempt-modules = [
    "typing",
    "typing_extensions",
    "collections",
    "collections.abc",
    "enum",
    "datetime",
    "pathlib",
    "pytest",
    "_pytest",
]

[tool.mypy]
python_version = "3.9"
cache_dir = ".cache/mypy"
ignore_missing_imports = true
disallow_untyped_defs = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_context = true
show_column_numbers = true
pretty = true

[tool.pyright]
pythonVersion = "3.9"
pythonPlatform = "All"
